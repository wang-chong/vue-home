webpackJsonp([5],{174:function(n,t,e){var a=e(0)(e(230),e(219),null,null,null);n.exports=a.exports},219:function(n,t){n.exports={render:function(){var n=this,t=n.$createElement;n._self._c;return n._m(0)},staticRenderFns:[function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("div",[e("h2",[n._v("bind函数实现")]),n._v(" "),e("h3",[n._v("以下代码是在vue组件中，通过webpack打包，否则第一个func()结果应为lol")]),n._v(" "),e("pre",[n._v("    /* eslint-disable */\n    Function.prototype.bind = Function.prototype.bind || function (context) {\n      const that = this\n      return function () {\n        return that.apply(context, arguments)\n      }\n    }\n    const obj = {\n      testVar: 'lalal'\n    }\n    const testVar = 'lol'\n    let func = function () {\n      console.log(this.testVar)\n    }\n    func() // undefined\n    func = func.bind(obj)\n    func() // lalal\n  ")]),n._v(" "),e("h3",[n._v("call&apply")]),n._v(" "),e("pre",[n._v("    // function.apply(obj, array||arguments)\n    // 代表将function里面的this指针指向obj\n    // 所以如果在function中运行this.prop,结果将是obj里面的prop属性值，如下：\n    const obj1 = {\n      applyVar: 'test123'\n    }\n    function applyDemo() {\n      console.log(this.applyVar)\n    }\n    applyDemo() // undefined\n    applyDemo.apply(obj1) // test123\n\n    "),e("span",[n._v("备注：call和apply的用法相同")]),n._v(";\n    "),e("span",[n._v("差别在于apply的第二个参数只能是数组或者arguments,call可以传任意类型的参数")]),n._v("。\n    运行以下语句可以将arguments转换为数组，从而可以让apply进行数组传参\n    "),e("span",[n._v("Array.prototype.slice.call(arguments)")]),n._v(";\n    ES6可用\n    "),e("span",[n._v("Array.from(arguments);")]),n._v("  ")]),n._v(" "),e("h3",[n._v("利用call&apply实现继承")]),n._v(" "),e("pre",[n._v("    // 利用call/apply来实现继承\n    function ParentFunc(name, age) {\n      this.name = name\n      this.age = age\n      this.printInfo = function () {\n        console.log('name=' + this.name + '&age=' + this.age + '&height=' + this.height)\n      }\n    }\n\n    // 继承ParentFunc里面的所有内容\n    // 但是此时ParentFunc里面的"),e("span",[n._v("this")]),n._v("指向"),e("span",[n._v("ChildFunc")]),n._v(".\n    function ChildFunc(name, age) {\n      this.height = '185'\n      ParentFunc.call(this, name, age)\n      // ParentFunc.apply(this, arguments) // 效果一样\n    }\n\n    const child = new ChildFunc('小张', '19')\n    child.printInfo() // name=小张&age=19&height=185\n\n    new ParentFunc('小张', '19').printInfo() //name=小张&age=19&height=undefined\n  ")])])}]}},230:function(n,t){function e(){console.log(this.applyVar)}function a(n,t){this.name=n,this.age=t,this.printInfo=function(){console.log("name="+this.name+"&age="+this.age+"&height="+this.height)}}function o(n,t){console.log(arguments),this.height="185",a.call(this,n,t)}Function.prototype.bind=Function.prototype.bind||function(n){var t=this;return function(){return t.apply(n,arguments)}};var i={testVar:"lalal"},l=function(){console.log(this.testVar)};l(),(l=l.bind(i))();var c={applyVar:"test123"};e(),e.apply(c),new o("小张","19").printInfo(),new a("小张","19").printInfo()}});
//# sourceMappingURL=5.497e9527e99f682f5e3a.js.map